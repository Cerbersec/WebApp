import React, { Component } from "react";
import ShoppingCartIcon from "@material-ui/icons/ShoppingCart";
import "./Header.css";
import IconButton from "@material-ui/core/IconButton";
import MenuIcon from "@material-ui/icons/Menu";
import Badge from "@material-ui/core/Badge";
import TextField from "@material-ui/core/TextField";
import Button from "@material-ui/core/Button";
import { withRouter, Link } from "react-router-dom";
import { connect } from "react-redux";
import { showCartDlg, toggleMenu } from "../../Redux/Actions";
import cartImage from "../../Images/brantayes.png";
import Api from "../../Api";
import Person from "@material-ui/icons/PersonOutline";
import Avatar from "@material-ui/core/Avatar";
import Menu from "@material-ui/core/Menu";
import MenuItem from "@material-ui/core/MenuItem";
import Select from "@material-ui/core/Select";
import AppBar from "@material-ui/core/AppBar";
import Toolbar from "@material-ui/core/Toolbar";
import { logout } from "../../Redux/actions/auth";
import InputAdornment from "@material-ui/core/InputAdornment";
import { Search, Settings}  from "@material-ui/icons";
import Grid from "@material-ui/core/Grid";


const mapStateToProps = state => {
  const { user } = state;
  const { message } = state;
  const {isLoggedIn } = state;
  return {
    nrOfItemsInCard: state.cartItems.length,
    loggedInUser: state.loggedInUser,
    message,
    user,
    isLoggedIn,
  };
};

class Header extends Component {
  constructor(props) {
    super(props);
  
    this.handleSubmit = this.handleSubmit.bind(this)

    this.state = {
      searchTerm: "",
      anchorEl: null,
      categories: [],
      categoryFilterValue: ""
    }
  }

  componentDidMount() {
    this.fetchCategories();
  }

  async fetchCategories() {
    const categories = await Api.getCategories()
    //manually add All categories option
    categories.unshift({
      category_name: "All categories"
    })
    const categoryOptions = categories.map(x => {
      return (
        <MenuItem key={x.category_name} value={x.category_name}>
          {x.category_name}
        </MenuItem>
      );
    });

    this.setState({
      categories: categoryOptions,
      categoryFilterValue: categories[0].category_name
    })
  }

  handleSubmit(e) {
    e.preventDefault();
    this.setState({ anchorEl: null });

    this.props.dispatch(logout())
    this.props.history.push("/")
  }

  render() {

    let { anchorEl } = this.state;

    return (
      <AppBar
        position="static"
        color="primary"
        style={{ padding: 0, marginBottom: 10 }}
      >
        <Toolbar>
          <div className="left-part">
            <IconButton
              color="secondary"
              onClick={() => {
                this.props.dispatch(toggleMenu());
              }}
            >
              <MenuIcon size="medium" />
            </IconButton>

            <Link to="/"><img src={cartImage} alt={"Logo"} style={{width: 120, height: 90, marginLeft: 10 }} /></Link>

            <TextField
              style={{ marginLeft: 30, width: 250, marginBottom: 15, color:"white" }}
              InputProps = {{ 
                style: { color: 'white' },
                startAdornment: (
                  <InputAdornment position="start">
                    <Search color="secondary" />
                  </InputAdornment>
                )
              }}
              InputLabelProps = {{ style: { color: 'white' } }}
              label="Search Products"
              value={this.state.searchTerm}
              onChange={e => {
                this.setState({ searchTerm: e.target.value });
              }}         
            />

            <Select
              style={{ maxWidth: 200, marginLeft: 20, color:"white" }}
              value={this.state.categoryFilterValue}
              MenuProps={{
                style: {
                  maxHeight: 500
                }
              }}
              onChange={e => {
                this.setState({ categoryFilterValue: e.target.value });
              }}
            >
              {this.state.categories}
            </Select>

            <Button
              color="secondary"
              variant="outlined"
              style={{marginLeft: 20}}
              onClick={() => {
                this.props.history.push(
                  "/?category=" +
                    this.state.categoryFilterValue +
                    "&term=" +
                    this.state.searchTerm
                );
              }}
            >
              {" "}
              Search
            </Button>
          </div>
          <div className="right-part">
            {!this.props.isLoggedIn ? (
              <Button
                color="secondary"
                variant="outlined"
                style={{ marginRight: 20 }}
                
                onClick={() => {
                  this.props.history.push("/login");
                }}
              >
                Log in
              </Button>
            ) : (
              <Avatar
                onClick={event => {
                  this.setState({ anchorEl: event.currentTarget });
                }}
                style={{ backgroundColor: "#3f51b5", marginRight: 10 }}
              >
                <Person />
              </Avatar>
            )}
            <IconButton
              aria-label="Cart"
              color="secondary"
              onClick={() => {
                this.props.dispatch(showCartDlg(true));
              }}
            >
              <Badge badgeContent={this.props.nrOfItemsInCard} color="primary">
                <ShoppingCartIcon />
              </Badge>
            </IconButton>
            <Menu
              anchorEl={anchorEl}
              open={Boolean(anchorEl)}
              onClose={() => {
                this.setState({ anchorEl: null });
              }}
            >
              <MenuItem
                onClick={() => {
                  this.setState({ anchorEl: null});
                  this.props.history.push("/account")
                }}
              >
                My account
              </MenuItem>
              <MenuItem
                onClick={this.handleSubmit}
              >
                Logout
              </MenuItem>      
            </Menu>
          </div>
        </Toolbar>
      </AppBar>
    );
  }
}

export default withRouter(connect(mapStateToProps)(Header));
